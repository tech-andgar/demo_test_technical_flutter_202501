name: "Flutter CI/CD"

on: # rebuild any PRs and main branch changes
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - "feature/*"
  workflow_dispatch:

jobs:
  check-dart-formatting:
    name: "Check Dart formatting"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # or: macos-latest, windows-latest
        channel: [stable] # or: beta, main
    steps:
      - uses: actions/checkout@v4
      - name: Initialize Flutter
        uses: ./.github/actions/initialize-flutter
        with:
          channel: ${{ matrix.channel }}

      # Verifies if the dart code is formatted well
      - name: ‚ú® Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        # --set-exit-if-changed stops execution if the any code is not well formatted
        # --output=none prints files which needs to be formatted

  lint:
    name: "Static Code Analysis"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # or: macos-latest, windows-latest
        channel: [stable] # or: beta, main
    steps:
      - uses: actions/checkout@v4
      - name: Initialize Flutter
        uses: ./.github/actions/initialize-flutter
        with:
          channel: ${{ matrix.channel }}

      # Checks for Semantic errors. Can be configured using analysis_options.yaml
      - name: üîç Analyze project source
        run: dart analyze --fatal-infos
        # optionally use --fatal-warnings to stop execution if any warnings are found

  test:
    name: "Run Flutter Tests and Coverage"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # or: macos-latest, windows-latest
        channel: [stable] # or: beta, main
    permissions:
      pull-requests: write
      contents: write
      # repository-projects: write
    steps:
      - uses: actions/checkout@v4
      - name: Initialize Flutter
        uses: ./.github/actions/initialize-flutter
        with:
          channel: ${{ matrix.channel }}
      - name: üß™ Run Tests with coverage
        run: flutter test --test-randomize-ordering-seed random --coverage

      - name: üìä Check Code Coverage
        uses: VeryGoodOpenSource/very_good_coverage@v3
        with:
          path: ./coverage/lcov.info
          min_coverage: 75

      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1

      - name: Report Code Coverage
        uses: zgosalvez/github-actions-report-lcov@v4
        with:
          coverage-files: coverage/lcov.info
          minimum-coverage: 75
          artifact-name: code-coverage-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # working-directory: apps/my-first-app
          update-comment: true

      - name: ‚¨ÜÔ∏è Upload Coverage to Coveralls
        uses: coverallsapp/github-action@v2.2.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info

      - id: run_package_flutter_coverage_badge
        name: Generate Coverage Badge
        run: dart run flutter_coverage_badge

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Andr√©s Garc√≠a
          author_email: dev@tech-andgar.me
          message: 'Updated coverage_badge.svg'
          add: 'coverage_badge.svg'

  build-and-deploy:
    name: "Build and Deploy Flutter Web"
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # or: macos-latest, windows-latest
        channel: [stable] # or: beta, main
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Initialize Flutter
        uses: ./.github/actions/initialize-flutter
        with:
          channel: ${{ matrix.channel }}

      # - run: flutter config --enable-web
      # - run: flutter build web --release

      - name: Build Flutter Web
        run: flutter build web --release --base-href="/demo_test_technical_flutter_202501/"

      # - run: |
      #    cd build/web
      #     git init
      #     git config --global user.email "dev@tech-andgar.me"
      #     git config --global user.name "Andr√©s Garc√≠a"
      #     git status
      #     git remote add origin https://${{secrets.commit_secret}}@github.com/${{secrets.commit_repo}}
      #     git checkout -b dist
      #     git add --all
      #     git commit -m "update"
      #     git push origin dist --force
      #     cd -
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     GITHUB_REPO: ${{ github.repository }}
      #     GITHUB_ACTOR: ${{ github.actor }}
      #     GITHUB_SHA: ${{ github.sha }}
      #     GITHUB_REF: ${{ github.ref }}
      #     GITHUB_HEAD_REF: ${{ github.head_ref }}
      #     GITHUB_BASE_REF: ${{ github.base_ref }}
      #     GITHUB_EVENT_NAME: ${{ github.event_name }}
      #     GITHUB_EVENT_PATH: ${{ github.event_path }}
      #     GITHUB_WORKFLOW: ${{ github.workflow }}
      #     GITHUB_ACTION: ${{ github.action }}
      #     GITHUB_REPOSITORY: ${{ github.repository }}
      #     GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          publish_branch: dist
          user_name: 'Andr√©s Garc√≠a'
          user_email: 'dev@tech-andgar.me'
          commit_message: 'Publish to gh-pages'